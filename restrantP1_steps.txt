## This is norte for tackling this project mws-restaurant-stage-1

1: as readme asked use python to connect the server to see how it look like
2: follow the step to code up so the all function works
3: check my code adheres to our HTML, CSS, JavaScript, and Git style guidelines.
4: https://review.udacity.com/#!/rubrics/1090/view to check rubric of spec for this project


## STEPS TO COMPLETE THE PROJECT

1 Get your own Google Maps API key. Replace the text YOUR_GOOGLE_MAPS_API_KEY 
    on line 37 of index.html with your own key. then check if it works

2 Convert the provided site to use a responsive design.
  No Bootstrap and other CSS frameworks, all responsiveness should be done with CSS.
  https://github.com/ichiLamuchy/Mobile-Web-Google-Scholarship/blob/master/responsive_1.md

3 Use appropriate document type declaration and viewport tags
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

4 Create a responsive grid-based layout using CSS
    https://www.w3schools.com/css/css_rwd_grid.asp
    
5 Use media queries that provide fluid breakpoints across different screen sizes
    Use responsive images that adjust for the dimensions and resolution of any mobile device
    
    +++++    here make sure all work as expected compare to what udacity present ++++++++++++++++

6 Implement accessibility features in the site HTML (most of this HTML is generated by JavaScript functions).
    6-1 keep in mind sementics
    6-2 check tab - ( at nav or any other plave like h) and add tabindex if necessary
    6-3 For those elements in which a semantic element is not available, appropriate ARIA roles need to be defined.
    6-3 check image has alt attribute
    https://github.com/ichiLamuchy/Mobile-Web-Google-Scholarship/blob/master/ally.txt

    +++++ check all style and rubic ++++++++++++++++++++++++++++++++++++++++
7 Once all dobne 
    NOw, add a ServiceWorker script to cache requests to all of the siteâ€™s assets so that 
    any page that has been visited by a user will be accessible when the user is offline. 
    Only caching needs to be implemented, no other ServiceWorker features.
