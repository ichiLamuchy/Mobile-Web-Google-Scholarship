=====================
Start Small

=====================
using http://udacity.github.io/RWDF-samples/quizzes/viewport-quiz/



        *** https://developers.google.com/web/tools/lighthouse/ ***
        Check list on your frontend tool


        Set viewport
        <meta name="viewport" content="with=device-width, initial-scale=1">

                initial-scale=1 means 1:1 
                so it will keep as it is on CSS

                CSS allow content to overflow it's container
                (Such as img overflow the size of div)
                To prevent this set 

                img, embed, object, video{
                  max-width: 100%;
                }


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
The First step you take is Set to the small divice
    1:  Set a view port
    2:  Make all width 100% if they are less than 100% fixed 
    3:  Tap area at least 48px
    4:  Check on developer tool
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Use media query (@media screen) to set min-width and max-width


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

------------------
Note for next step


Adding basic media query--------
    <link rel="stylesheet" media="screen and (min-width: 500px)" href="yes.css">
    or
    @media screen and (min-width: 500px){
        body{background-color: green;}
    }
    https://developer.mozilla.org/en-US/docs/Web/CSS/@media#Media_types
    
    don't do it with @import tag - expensive / too many http request

    use max-width, min-width (according to blowser window)
    
Break point -------------------
    break point to change the size of written and etc:
    
    example:
    725 minor break point
    800 minor break point - nav menu will show up, hamburger will disappeared
    960 break point - layout change
    1024 ads show up
    
    where to put break point:
    look at content 
    
    step1: desk top to go - small as I get
    slowly size up and see the lay out that where the content likes to have a break point
    add link on head on each break point
   <link rel="stylesheet" media="screen and (min-width:550px)" 
    href = "medium-size.css"> 
    
    

Grid fluid system ==========================
    Boot strap, 960 pixel grid layout system
    
    Flexbox ------------

    on container div add
    display:flex;  // defalt fit on the single line
    flex-wrap: wrap; // can go next row, only re-seize when really need to do.
    css order attribute to change order
        @media screen and (min-width: 500px){
        header {width:100%; order:1;}
        .blue{width:10%; order:4;}
        .pink{width:90%; order:3;}
        .green{width:40%; order:2;}
        .orange{width:20%; order:5;}
         }
    
 4 responsive patterns (L4)------------------------------
    
    1: Mostly fluid ----
    
        below code can be on 1 sheet. Everything is just added onto original css file. 
        all @media screen can be on the page
        Only what you want to change (over write or add) will be on @media screen
        
            .container{
                    disolay: flex;
                    flew-wrap: wrap;
                }
            .box{
                width: 100%;
            }
            @media screen and (min-width: 450px){
                .dark_blue, .green {width:50%;}
            }
            @media screen and (min-width: 550px){
                .dark_blue, .light_blue {width:25%;}
                .green, .red, .orange {width:33.3333%;}
            }
            // the way to keep the margin after 800px width
            @media screen and (min-width: 700px){
                .container {width700px;
                margin-left: auto;
                margin-right: auto;
             }


    2: Column drop ----
        
        Vertically until first break point hits
        
        then next break point hits to change the shape
        
        Generally once the view port hits a maximum width, 
        the columns hit a maximun size, and instead of getting wider,
        margins are added to the left .nd right
        
        .container{
            disolay: flex;
            flew-wrap: wrap;
        }
        .box{
            width: 100%;
        }
      
        // if the vp changed >= 450px
        @media screen and (min-width: 450px){
            .dark_blue {width:25%;}
            .light_blue {width:75%;}
        }
        @media screen and (min-width: 550px){
            .dark_blue, .green {width:25%;}
            .light_blue {width:75%;}
        }
    
    3: Layout shifter ----
    
        using order attribute. moving the place around.
        set 
            width: and order:
        you can set negative number too
        default start from 0
          
    4: off canvas 
    https://classroom.udacity.com/nanodegrees/nd024/parts/0bf842e9-7269-42de-b68b-812ca7823517/modules/e08f25bf-f172-4fb8-9812-b09ca908ae37/lessons/3561069759/concepts/35307193050923
    off screan content is only comes in when width is big enough
    
    example:
        // JS
        menu.addEventListener('click', function(e) {
            drawer.classList.toggle('open');
            e.stopPropagation();
        });
        // CSS
        nav {
          width: 300px;
          position: absolute;
          /* This trasform moves the drawer off canvas. */
          -webkit-transform: translate(-300px, 0);
          transform: translate(-300px, 0);
          /* Optionally, we animate the drawer. */
          transition: transform 0.3s ease;
        }
        nav.open {
          -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
        }
      
      
    
    
    
    
    
    
